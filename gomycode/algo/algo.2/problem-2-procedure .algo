PROCEDURE dot_product(v1,v2:ARRAY_OF FLOAT , VAR ps:FLOAT)
VAR
    i: INTEGER;
BEGIN
    ps := 0;
    i := 0;
    WHILE (i <= v1.length-1) DO
       ps := ps+v1[i]*v2[i];
    END_WHILE
    Write (ps)
END

ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF FLOAT ;
    ps  : FLOAT ;
    i,n : INTEGER ;
BEGIN
    Write("write v1 and v2 length") ;
    read(n);
    FOR i FROM 0 TO n  STEP 1  DO
       read(v1[i])  
        END_FOR
    dot_product(v1,v2,ps)
    IF (ps = 0) THEN
    Write ("orthogonal")
    ELSE
    Write ("not orthogonal")
    END_IF
    
    
END

// **************************FUNCTION**************************//
FUNCTION dot_product(v1,v2:ARRAY_OF FLOAT , VAR ps:FLOAT):FLOAT;
VAR
    ps: FLOAT;
    i: INTEGER;
BEGIN
    ps := 0;
    i := 0;
    WHILE (i <= v1.length-1) DO
       ps := ps+v1[i]*v2[i];
    END_WHILE
    RETURN ps;
END
ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF FLOAT ;
    ps  : FLOAT ;
    i,n : INTEGER ;
BEGIN
    Write("write v1 and v2 length") ;
    read(n);
    FOR i FROM 0 TO n  STEP 1  DO
       read(v1[i])  
        END_FOR
    ps := dot_product(v1,v2);
    IF (ps = 0) THEN
        Write ("orthogonal")
        ELSE
        Write ("not orthogonal")
    END_IF
END